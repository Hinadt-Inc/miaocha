name: PR Title Check

on:
  pull_request:
    types: [opened, edited, synchronize]
    branches: [ dev ]

jobs:
  check-pr-title:
    runs-on: ubuntu-latest
    permissions:
      issues: read  # Needs read access to issues
      pull-requests: write  # Needs write access to PRs for updating description
    steps:
      - name: Check PR title format
        id: check-title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "PR Title: $PR_TITLE"
          
          # Use Python for safer string handling
          python3 << 'EOF'
          import os
          import re
          import sys
          
          # Read PR title from env to avoid shell injection
          pr_title = os.environ.get('PR_TITLE', '')
          print(f"Processing PR Title: {repr(pr_title)}")
          
          # Validate title format: must start with [ISSUE #<number>]
          pattern = r'^\[ISSUE #(\d+)\]'
          match = re.match(pattern, pr_title)
          
          if not match:
              print("‚ùå Invalid PR title! Must start with '[ISSUE #xxx]'")
              print("Example: [ISSUE #17] Support global Trace ID")
              print(f"Current title: {pr_title}")
              sys.exit(1)
          
          # Extract issue number
          issue_number = match.group(1)
          print(f"Issue Number: {issue_number}")
          
          # Write to GitHub Actions outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"issue_number={issue_number}\n")
          
          print("‚úÖ PR title format is valid")
          EOF

      - name: Check if issue exists and is open
        id: check-issue
        env:
          ISSUE_NUMBER: ${{ steps.check-title.outputs.issue_number }}
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Checking Issue #$ISSUE_NUMBER"
          
          # Use Python for API calls and JSON processing
          python3 << 'EOF'
          import os
          import json
          import urllib.request
          import urllib.error
          import sys
          
          issue_number = os.environ['ISSUE_NUMBER']
          github_token = os.environ['GITHUB_TOKEN']
          github_repo = os.environ['GITHUB_REPOSITORY']
          
          # Build API URL
          api_url = f"https://api.github.com/repos/{github_repo}/issues/{issue_number}"
          
          # Create request
          req = urllib.request.Request(api_url)
          req.add_header('Authorization', f'token {github_token}')
          req.add_header('Accept', 'application/vnd.github.v3+json')
          
          try:
              # Send request
              with urllib.request.urlopen(req) as response:
                  issue_data = json.loads(response.read().decode())
              
              print(f"Issue #{issue_number} found")
              
              # Check issue state
              state = issue_data.get('state', '')
              title = issue_data.get('title', '')
              
              print(f"Issue State: {state}")
              print(f"Issue Title: {title}")
              
              if state != 'open':
                  print(f"‚ùå Issue #{issue_number} state is not 'open' (current: {state})")
                  sys.exit(1)
              
              print(f"‚úÖ Issue #{issue_number} exists and is open")
              
              # Sanitize special characters in the title
              safe_title = title.replace('\n', '\\n').replace('\r', '\\r')
              
              # Write outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"issue_title={safe_title}\n")
                  
          except urllib.error.HTTPError as e:
              if e.code == 404:
                  print(f"‚ùå Issue #{issue_number} does not exist")
              else:
                  print(f"‚ùå API request failed: HTTP {e.code}")
              sys.exit(1)
          except Exception as e:
              print(f"‚ùå An error occurred: {str(e)}")
              sys.exit(1)
          EOF

      - name: Check if PR is already linked to Issue
        id: check-link
        env:
          CURRENT_BODY: ${{ github.event.pull_request.body }}
          ISSUE_NUMBER: ${{ steps.check-title.outputs.issue_number }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üîç Checking if PR is already linked to Issue #$ISSUE_NUMBER"
          
          # Use Python for safe string handling and API calls
          python3 << 'EOF'
          import os
          import json
          import urllib.request
          import urllib.error
          import re
          import sys
          
          current_body = os.environ.get('CURRENT_BODY', '')
          issue_number = os.environ['ISSUE_NUMBER']
          pr_number = os.environ['PR_NUMBER']
          github_token = os.environ['GITHUB_TOKEN']
          github_repo = os.environ['GITHUB_REPOSITORY']
          
          print("Current PR body: (sanitized)")
          
          # Initialize linked state
          is_linked = False
          link_reason = ""
          
          # Method 1: check PR body for link keywords
          if current_body:
              # Match close/fix/resolve keywords
              link_patterns = [
                  rf'\b(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#{issue_number}\b',
                  rf'#{issue_number}\b'
              ]
              
              for pattern in link_patterns:
                  if re.search(pattern, current_body, re.IGNORECASE):
                      is_linked = True
                      link_reason = "Link keywords found in PR body"
                      print(f"‚úÖ Detected link: {link_reason}")
                      break
          
          # Method 2: check PR timeline events
          if not is_linked:
              print("üîç Checking PR timeline events...")
              try:
                  timeline_url = f"https://api.github.com/repos/{github_repo}/issues/{pr_number}/timeline"
                  req = urllib.request.Request(timeline_url)
                  req.add_header('Authorization', f'token {github_token}')
                  req.add_header('Accept', 'application/vnd.github.v3+json')
                  
                  with urllib.request.urlopen(req) as response:
                      timeline_data = json.loads(response.read().decode())
                  
                  for event in timeline_data:
                      if (event.get('event') == 'connected_event' and 
                          event.get('source', {}).get('issue', {}).get('number') == int(issue_number)):
                          is_linked = True
                          link_reason = "Detected GitHub linking event"
                          print(f"‚úÖ Detected link: {link_reason}")
                          break
              except Exception as e:
                  print(f"‚ö†Ô∏è Error checking PR timeline: {str(e)}")
          
          # Method 3: check Issue timeline events
          if not is_linked:
              print("üîç Checking Issue timeline events...")
              try:
                  issue_timeline_url = f"https://api.github.com/repos/{github_repo}/issues/{issue_number}/timeline"
                  req = urllib.request.Request(issue_timeline_url)
                  req.add_header('Authorization', f'token {github_token}')
                  req.add_header('Accept', 'application/vnd.github.v3+json')
                  
                  with urllib.request.urlopen(req) as response:
                      issue_timeline_data = json.loads(response.read().decode())
                  
                  for event in issue_timeline_data:
                      if (event.get('event') == 'connected_event' and 
                          event.get('source', {}).get('issue', {}).get('number') == int(pr_number)):
                          is_linked = True
                          link_reason = "Issue timeline shows linked"
                          print(f"‚úÖ Detected link: {link_reason}")
                          break
              except Exception as e:
                  print(f"‚ö†Ô∏è Error checking Issue timeline: {str(e)}")
          
          # Write outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"is_linked={'true' if is_linked else 'false'}\n")
              f.write(f"link_reason={link_reason}\n")
          
          if is_linked:
              print(f"‚úÖ PR is already linked to Issue #{issue_number} ({link_reason})")
          else:
              print(f"‚ÑπÔ∏è PR is not linked to Issue #{issue_number}, will add automatically")
          EOF

      - name: Auto link PR to Issue
        id: link-issue
        if: ${{ steps.check-link.outputs.is_linked == 'false' }}
        env:
          CURRENT_BODY: ${{ github.event.pull_request.body }}
          ISSUE_NUMBER: ${{ steps.check-title.outputs.issue_number }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üîó ÂºÄÂßãËá™Âä®ÂÖ≥ËÅîPR #$PR_NUMBER Âà∞Issue #$ISSUE_NUMBER"
          
          # ‰ΩøÁî® Python ËøõË°åÂÆâÂÖ®ÁöÑÂ≠óÁ¨¶‰∏≤Â§ÑÁêÜÂíå API Ë∞ÉÁî®
          python3 << 'EOF'
          import os
          import json
          import urllib.request
          import urllib.error
          import sys
          
          current_body = os.environ.get('CURRENT_BODY', '')
          issue_number = os.environ['ISSUE_NUMBER']
          pr_number = os.environ['PR_NUMBER']
          github_token = os.environ['GITHUB_TOKEN']
          github_repo = os.environ['GITHUB_REPOSITORY']
          
          # ÊûÑÂª∫ÂÖ≥ËÅîÊñáÊú¨
          link_text = f"Closes #{issue_number}"
          
          # ÊûÑÂª∫Êñ∞ÁöÑPRÊèèËø∞
          if not current_body or current_body.strip() == '' or current_body == 'null':
              new_body = link_text
          else:
              new_body = f"{link_text}\n\n{current_body}"
          
          print("Êñ∞ÁöÑPRÊèèËø∞: (ÂÜÖÂÆπÂ∑≤ÂÆâÂÖ®Â§ÑÁêÜ)")
          
          # ÂáÜÂ§áAPIËØ∑Ê±ÇÊï∞ÊçÆ
          data = {
              'body': new_body
          }
          
          # ‰ΩøÁî®GitHub APIÊõ¥Êñ∞PRÊèèËø∞
          api_url = f"https://api.github.com/repos/{github_repo}/pulls/{pr_number}"
          
          try:
              req = urllib.request.Request(api_url, method='PATCH')
              req.add_header('Authorization', f'token {github_token}')
              req.add_header('Accept', 'application/vnd.github.v3+json')
              req.add_header('Content-Type', 'application/json')
              
              json_data = json.dumps(data).encode('utf-8')
              
              with urllib.request.urlopen(req, data=json_data) as response:
                  response_data = json.loads(response.read().decode())
              
              print(f"‚úÖ ÊàêÂäüÂÖ≥ËÅîPR #{pr_number} Âà∞Issue #{issue_number}")
              
              # ÂÜôÂÖ•ËæìÂá∫
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("link_added=true\n")
                  
          except urllib.error.HTTPError as e:
              print(f"‚ùå ÂÖ≥ËÅîÂ§±Ë¥•ÔºåHTTPÁä∂ÊÄÅÁ†Å: {e.code}")
              try:
                  error_response = e.read().decode()
                  print(f"ÈîôËØØÂìçÂ∫î: {error_response}")
              except:
                  pass
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("link_added=false\n")
              sys.exit(1)
              
          except Exception as e:
              print(f"‚ùå Â§ÑÁêÜËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {str(e)}")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("link_added=false\n")
              sys.exit(1)
          EOF

      - name: Success message
        env:
          ISSUE_NUMBER: ${{ steps.check-title.outputs.issue_number }}
          ISSUE_TITLE: ${{ steps.check-issue.outputs.issue_title }}
          IS_LINKED: ${{ steps.check-link.outputs.is_linked }}
          LINK_REASON: ${{ steps.check-link.outputs.link_reason }}
          LINK_ADDED: ${{ steps.link-issue.outputs.link_added }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # ‰ΩøÁî® Python ËøõË°åÂÆâÂÖ®ÁöÑÂ≠óÁ¨¶‰∏≤Â§ÑÁêÜ
          python3 << 'EOF'
          import os
          
          issue_number = os.environ['ISSUE_NUMBER']
          issue_title = os.environ.get('ISSUE_TITLE', '')
          is_linked = os.environ['IS_LINKED']
          link_reason = os.environ.get('LINK_REASON', '')
          link_added = os.environ.get('LINK_ADDED', '')
          pr_title = os.environ['PR_TITLE']
          
          print("üéâ PRÊ†áÈ¢òÊ†°È™åÈÄöËøáÔºÅ")
          print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
          print(f"üìã PRÊ†áÈ¢ò: {pr_title}")
          print(f"üîó ÂÖ≥ËÅîIssue: #{issue_number}")
          print(f"üìù IssueÊ†áÈ¢ò: {issue_title}")
          print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
          
          if is_linked == "true":
              print(f"‚úÖ ÂÖ≥ËÅîÁä∂ÊÄÅ: Â∑≤ÂÖ≥ËÅî ({link_reason})")
              print("üí° Êó†ÈúÄÈáçÂ§çÊìç‰ΩúÔºåPRÂ∑≤Ê≠£Á°ÆÂÖ≥ËÅîÂà∞Issue")
          elif link_added == "true":
              print("‚úÖ ÂÖ≥ËÅîÁä∂ÊÄÅ: Â∑≤Ëá™Âä®Ê∑ªÂä†ÂÖ≥ËÅî")
              print("üìé PRÂ∑≤Ëá™Âä®ÂÖ≥ËÅîÂà∞IssueÔºåÂêàÂπ∂PRÊó∂Â∞ÜËá™Âä®ÂÖ≥Èó≠ÂØπÂ∫îÁöÑIssue")
          else:
              print("‚ö†Ô∏è ÂÖ≥ËÅîÁä∂ÊÄÅ: ÂÖ≥ËÅîÂ§±Ë¥•")
          EOF
