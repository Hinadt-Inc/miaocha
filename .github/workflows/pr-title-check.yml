name: PR Title Check

on:
  pull_request:
    types: [opened, edited, synchronize]
    branches: [ dev ]

jobs:
  check-pr-title:
    runs-on: ubuntu-latest
    permissions:
      issues: read  # 需要读取issues的权限
      pull-requests: write  # 需要写入PR的权限，用于更新PR描述
    steps:
      - name: Check PR title format
        id: check-title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # 检查是否以 [ISSUE #xxx] 开头
          if [[ ! "$PR_TITLE" =~ ^\[ISSUE\ #[0-9]+\] ]]; then
            echo "❌ PR标题格式错误！必须以 '[ISSUE #xxx]' 开头"
            echo "正确格式示例: [ISSUE #17] 支持全局 Trace 日志ID 特性"
            exit 1
          fi
          
          # 提取issue编号
          ISSUE_NUMBER=$(echo "$PR_TITLE" | grep -o '#[0-9]*' | grep -o '[0-9]*')
          echo "Issue Number: $ISSUE_NUMBER"
          
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "❌ 无法从PR标题中提取issue编号"
            exit 1
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ PR标题格式正确"

      - name: Check if issue exists and is open
        id: check-issue
        run: |
          ISSUE_NUMBER="${{ steps.check-title.outputs.issue_number }}"
          
          # 使用GitHub API检查issue状态
          ISSUE_RESPONSE=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
          
          echo "Issue API Response: $ISSUE_RESPONSE"
          
          # 检查issue是否存在
          if echo "$ISSUE_RESPONSE" | grep -q '"message":"Not Found"'; then
            echo "❌ Issue #$ISSUE_NUMBER 不存在"
            exit 1
          fi
          
          # 使用jq解析JSON，提取issue状态
          ISSUE_STATE=$(echo "$ISSUE_RESPONSE" | jq -r '.state')
          echo "Issue State: $ISSUE_STATE"
          
          if [ "$ISSUE_STATE" != "open" ]; then
            echo "❌ Issue #$ISSUE_NUMBER 状态不是open (当前状态: $ISSUE_STATE)"
            exit 1
          fi
          
          # 使用jq解析JSON，提取issue标题
          ISSUE_TITLE=$(echo "$ISSUE_RESPONSE" | jq -r '.title')
          echo "Issue Title: $ISSUE_TITLE"
          
          echo "✅ Issue #$ISSUE_NUMBER 存在且状态为open"
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT

      - name: Check if PR is already linked to Issue
        id: check-link
        env:
          CURRENT_BODY: ${{ github.event.pull_request.body }}
        run: |
          ISSUE_NUMBER="${{ steps.check-title.outputs.issue_number }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          echo "🔍 检查PR是否已经关联到Issue #$ISSUE_NUMBER"
          echo "当前PR描述: (内容已安全处理)"
          
          # 初始化关联状态
          IS_LINKED=false
          LINK_REASON=""
          
          # 方法1：检查PR描述中是否包含关联关键词
          if printf '%s' "$CURRENT_BODY" | grep -qEi "(close[sd]?|fix(e[sd])?|resolve[sd]?) #$ISSUE_NUMBER\b"; then
            IS_LINKED=true
            LINK_REASON="PR描述中包含关联关键词"
            echo "✅ 检测到关联：$LINK_REASON"
          fi
          
          # 方法2：检查PR的时间线事件，看是否有connected事件
          if [ "$IS_LINKED" = false ]; then
            echo "🔍 检查PR时间线事件..."
            TIMELINE_RESPONSE=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/timeline")
            
            if echo "$TIMELINE_RESPONSE" | jq -e ".[] | select(.event == \"connected_event\" and .source.issue.number == $ISSUE_NUMBER)" > /dev/null 2>&1; then
              IS_LINKED=true
              LINK_REASON="检测到GitHub连接事件"
              echo "✅ 检测到关联：$LINK_REASON"
            fi
          fi
          
          # 方法3：检查Issue的时间线，看是否被这个PR关联
          if [ "$IS_LINKED" = false ]; then
            echo "🔍 检查Issue时间线事件..."
            ISSUE_TIMELINE=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/timeline")
            
            if echo "$ISSUE_TIMELINE" | jq -e ".[] | select(.event == \"connected_event\" and .source.issue.number == $PR_NUMBER)" > /dev/null 2>&1; then
              IS_LINKED=true
              LINK_REASON="Issue时间线显示已连接"
              echo "✅ 检测到关联：$LINK_REASON"
            fi
          fi
          
          # 方法4：检查PR描述中是否有其他引用格式
          if [ "$IS_LINKED" = false ]; then
            if printf '%s' "$CURRENT_BODY" | grep -qE "#$ISSUE_NUMBER\b"; then
              IS_LINKED=true
              LINK_REASON="PR描述中引用了Issue"
              echo "✅ 检测到关联：$LINK_REASON"
            fi
          fi
          
          echo "is_linked=$IS_LINKED" >> $GITHUB_OUTPUT
          echo "link_reason=$LINK_REASON" >> $GITHUB_OUTPUT
          
          if [ "$IS_LINKED" = true ]; then
            echo "✅ PR已经关联到Issue #$ISSUE_NUMBER ($LINK_REASON)"
          else
            echo "ℹ️ PR尚未关联到Issue #$ISSUE_NUMBER，将自动添加关联"
          fi

      - name: Auto link PR to Issue
        id: link-issue
        if: ${{ steps.check-link.outputs.is_linked == 'false' }}
        env:
          CURRENT_BODY: ${{ github.event.pull_request.body }}
        run: |
          ISSUE_NUMBER="${{ steps.check-title.outputs.issue_number }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          echo "🔗 开始自动关联PR #$PR_NUMBER 到Issue #$ISSUE_NUMBER"
          
          # 构建关联文本
          LINK_TEXT="Closes #$ISSUE_NUMBER"
          
          # 构建新的PR描述
          if [ -z "$CURRENT_BODY" ] || [ "$CURRENT_BODY" == "null" ]; then
            NEW_BODY="$LINK_TEXT"
          else
            NEW_BODY="$LINK_TEXT"$'\n\n'"$CURRENT_BODY"
          fi
          
          echo "新的PR描述: (内容已安全处理)"
          
          # 使用GitHub API更新PR描述
          UPDATE_RESPONSE=$(curl -s -w "%{http_code}" -X PATCH \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
            -d "$(jq -n --arg body "$NEW_BODY" '{body: $body}')")
          
          HTTP_CODE="${UPDATE_RESPONSE: -3}"
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ 成功关联PR #$PR_NUMBER 到Issue #$ISSUE_NUMBER"
            echo "link_added=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 关联失败，HTTP状态码: $HTTP_CODE"
            echo "响应: ${UPDATE_RESPONSE%???}"
            echo "link_added=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Success message
        run: |
          ISSUE_NUMBER="${{ steps.check-title.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.check-issue.outputs.issue_title }}"
          IS_LINKED="${{ steps.check-link.outputs.is_linked }}"
          LINK_REASON="${{ steps.check-link.outputs.link_reason }}"
          LINK_ADDED="${{ steps.link-issue.outputs.link_added }}"
          
          echo "🎉 PR标题校验通过！"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 PR标题: ${{ github.event.pull_request.title }}"
          echo "🔗 关联Issue: #$ISSUE_NUMBER"
          echo "📝 Issue标题: $ISSUE_TITLE"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [ "$IS_LINKED" = "true" ]; then
            echo "✅ 关联状态: 已关联 ($LINK_REASON)"
            echo "💡 无需重复操作，PR已正确关联到Issue"
          elif [ "$LINK_ADDED" = "true" ]; then
            echo "✅ 关联状态: 已自动添加关联"
            echo "📎 PR已自动关联到Issue，合并PR时将自动关闭对应的Issue"
          else
            echo "⚠️ 关联状态: 关联失败"
          fi 