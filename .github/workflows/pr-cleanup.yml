name: PR CD Cleanup

on:
  pull_request:
    types: [ closed ]
    branches: [ dev ]
    
permissions:
  issues: write
  pull-requests: write


jobs:
  cleanup-k8s:
    runs-on: arc-runner-set
    if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy to inner test k8s env') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore kubectl from local cache
        run: |
          echo "🔍 Checking local kubectl cache..."
          KUBECTL_VERSION="v1.29.0"  # Use fixed version for caching
          KUBECTL_CACHE_KEY="kubectl-${KUBECTL_VERSION}-$(uname -m)"
          KUBECTL_CACHE_PATH="/opt/action-runner/cache/kubectl/${KUBECTL_CACHE_KEY}"
          
          # Create cache directory
          mkdir -p /opt/action-runner/cache/kubectl
          
          if [ -f "$KUBECTL_CACHE_PATH/kubectl" ]; then
            echo "✅ Found kubectl cache: $KUBECTL_CACHE_KEY"
            sudo cp "$KUBECTL_CACHE_PATH/kubectl" /usr/local/bin/kubectl
            sudo chmod +x /usr/local/bin/kubectl
            echo "KUBECTL_CACHE_HIT=true" >> $GITHUB_ENV
          else
            echo "❌ kubectl cache miss, will download"
            echo "KUBECTL_CACHE_HIT=false" >> $GITHUB_ENV
            echo "KUBECTL_CACHE_PATH=$KUBECTL_CACHE_PATH" >> $GITHUB_ENV
          fi

      - name: Install kubectl (if cache miss)
        if: env.KUBECTL_CACHE_HIT == 'false'
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'  # Use fixed version

      - name: Save kubectl to local cache
        if: env.KUBECTL_CACHE_HIT == 'false' && always()
        run: |
          echo "💾 Save kubectl to local cache..."
          if command -v kubectl >/dev/null 2>&1; then
            mkdir -p "$KUBECTL_CACHE_PATH"
            cp "$(which kubectl)" "$KUBECTL_CACHE_PATH/kubectl"
            echo "✅ kubectl saved to local cache: $KUBECTL_CACHE_KEY"
          else
            echo "⚠️ kubectl not found, skip cache save"
          fi

      - name: Setup kubectl
        run: |
          echo "🔧 Configure kubectl..."
          # Create kubeconfig file
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

          # Verify connectivity
          kubectl cluster-info

      - name: Cleanup Kubernetes resources
        run: |
          echo "🧹 Start cleaning Kubernetes resources for PR-${{ github.event.pull_request.number }}..."

          # Set environment variables
          export PR_NUMBER=${{ github.event.pull_request.number }}

          # Execute cleanup
          chmod +x scripts/github/k8s/cleanup.sh
          ./scripts/github/k8s/cleanup.sh

      - name: Cleanup Docker images (optional)
        continue-on-error: true
        run: |
          echo "🐳 Cleaning Docker images..."

          # Get image list
          IMAGES_TO_DELETE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "miaocha-test-pr" | grep "pr${{ github.event.pull_request.number }}" || true)

          if [ -n "$IMAGES_TO_DELETE" ]; then
            echo "Found images to delete:"
            echo "$IMAGES_TO_DELETE"

            # Remove local images
            echo "$IMAGES_TO_DELETE" | xargs -r docker rmi -f
            echo "✅ Local image cleanup completed"
          else
            echo "No images found to clean"
          fi

      - name: Comment on PR with cleanup info
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            const pr_state = context.payload.pull_request.state;
            const pr_merged = context.payload.pull_request.merged;

            let status_text = '';
            let status_icon = '';

            if (pr_merged) {
              status_text = 'merged';
              status_icon = '✅';
            } else if (pr_state === 'closed') {
              status_text = 'closed';
              status_icon = '❌';
            } else {
              status_text = 'status changed';
              status_icon = '🔄';
            }

            const comment = `## 🧹 Internal test environment cleaned up

            ${status_icon} **PR #${pr_number}** ${status_text}. The internal test environment has been automatically cleaned up.

            ### 📋 Cleanup Scope

            - ✅ Kubernetes namespace: \`miaocha-pr-${pr_number}\`
            - ✅ All Pods, Services, Deployments
            - ✅ Local Docker images
            - ✅ Related network resources

            ### 📊 Details

            - **Time**: ${new Date().toLocaleString('en-US', { timeZone: 'Asia/Shanghai' })}
            - **Reason**: PR ${status_text}
            - **Resource status**: fully cleaned

            ### 🎉 Done

            All internal test environment resources related to this PR have been fully cleaned to avoid extra costs.

            ---
            *🤖 This comment was generated by CI/CD*`;

            // 创建清理评论
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: comment
            });

            console.log('✅ Created cleanup comment');

      - name: Summary
        run: |
          echo "## 🧹 PR cleanup completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Cleanup Scope" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Kubernetes namespace: miaocha-pr-${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All related Pods, Services, Deployments" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Local Docker images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎉 Resources fully cleaned" >> $GITHUB_STEP_SUMMARY
          echo "All test environment resources for PR-${{ github.event.pull_request.number }} have been cleaned" >> $GITHUB_STEP_SUMMARY
