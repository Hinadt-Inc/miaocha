name: PR CI/CD

on:
  pull_request:
    types: [ opened, synchronize, reopened, labeled ]
    branches: [ dev ]

# Permissions: allow writing to issues and pull-requests
permissions:
  issues: write
  pull-requests: write

jobs:
  check-skip-ci:
    runs-on: ubuntu-latest
    if: ${{ github.event.action != 'labeled'  }}
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should_skip }}
    steps:
      - name: Check if CI should be skipped
        id: skip-check
        run: |
          if echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | grep -q '"no ci"'; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "🚫 CI 被跳过：发现 'no ci' 标签"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "✅ CI 将正常执行"
          fi

  # Job to summarize when CI is skipped
  skip-ci-info:
    runs-on: ubuntu-latest
    needs: check-skip-ci
    if: ${{ needs.check-skip-ci.outputs.should_skip == 'true' }}
    steps:
      - name: CI Skipped
        run: |
          echo "::notice title=CI Skipped::This PR has 'no ci' label; CI checks were skipped"

  # PR CI main test job
  pr-ci:
    runs-on: ubuntu-latest
    needs: check-skip-ci
    if: ${{ needs.check-skip-ci.outputs.should_skip == 'false' }}
    # Job-level concurrency — new pushes cancel in-progress CI/CD jobs
    concurrency:
      group: pr-ci-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true  # Auto checkout all submodules

      - name: Cache JDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/Java_Temurin_jdk
            ~/.cache/coursier
          key: ${{ runner.os }}-jdk-17-temurin-github
          restore-keys: ${{ runner.os }}-jdk-17-temurin-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          check-latest: false  # Do not check latest to speed up setup

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure system for Doris
        run: |
          # Disable swap
          sudo swapoff -a

          # Tune kernel parameters
          sudo sysctl -w vm.max_map_count=2000000
          sudo sysctl -w vm.swappiness=0
          sudo sysctl -w fs.file-max=655360

          # Verify settings
          echo "=== System Configuration ==="
          echo "Swap status:"
          swapon --show
          echo "vm.max_map_count: $(cat /proc/sys/vm/max_map_count)"
          echo "vm.swappiness: $(cat /proc/sys/vm/swappiness)"
          echo "fs.file-max: $(cat /proc/sys/fs/file-max)"

      - name: Run tests and build
        run: |
          echo "🚀 Running full Maven tests and build"
          echo "Including unit tests and integration tests..."
          mvn clean verify
          echo "✅ All tests passed, build completed"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./miaocha-server/target/site/jacoco-aggregate/jacoco.xml
          flags: tests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: '41b29712-7ac0-4837-ba28-e3a755b03952'
          verbose: true
          # 添加更多配置确保更好的覆盖率比较
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          override_commit: ${{ github.event.pull_request.head.sha }}
          override_branch: ${{ github.event.pull_request.head.ref }}

  check-ci-status:
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'labeled' && contains(github.event.pull_request.labels.*.name, 'deploy to inner test k8s env') }}
    outputs:
      ci_passed: ${{ steps.check-ci.outputs.ci_passed }}
    steps:
      - name: Check if CI has passed for this PR
        id: check-ci
        run: |
          # 使用 GitHub API 检查 PR 的最新工作流运行状态
          WORKFLOW_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=${{ github.event.pull_request.head.sha }}&event=pull_request")

          # 检查是否存在成功的 "PR CI/CD" 工作流
          CI_SUCCESS=$(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[] | select(.name == "PR CI/CD") | select(.conclusion == "success") | .id' | head -1)

          # 如果有 no ci 标签，允许部署，即使无历史 CI
          if echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | grep -q '"no ci"'; then
            echo "ci_passed=true" >> $GITHUB_OUTPUT
            echo "✅ 发现 'no ci' 标签，允许部署"
          elif [ -n "$CI_SUCCESS" ]; then
            echo "ci_passed=true" >> $GITHUB_OUTPUT
            echo "✅ CI has passed for this PR"
          else
            echo "ci_passed=false" >> $GITHUB_OUTPUT
            echo "❌ CI has not passed for this PR"
            exit 1  # 无 no ci 标签且 CI 未通过，停止作业
          fi

  # PR CD 测试环境部署
  pr-cd-test:
    runs-on: arc-runner-set
    needs: [ check-skip-ci, pr-ci, check-ci-status ]
    if: |
      always() &&
      contains(github.event.pull_request.labels.*.name, 'deploy to inner test k8s env') &&
      (
        (github.event.action != 'labeled' && github.event.action != 'unlabeled' && (needs.pr-ci.result == 'success' || (needs.check-skip-ci.result == 'success' && needs.check-skip-ci.outputs.should_skip == 'true'))) ||
        (github.event.action == 'labeled' && needs.check-ci-status.result == 'success')
      ) &&
      !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    # Job级别的并发控制 - 新推送会取消正在运行的 CI/CD 作业
    concurrency:
      group: pr-cd-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - name: Check CI status (for label trigger)
        if: ${{ github.event.action == 'labeled' }}
        run: |
          echo "🔍 Checking CI status (label trigger)..."

          # Use GitHub API to check latest workflow run status
          WORKFLOW_RUNS=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=${{ github.event.pull_request.head.sha }}&event=pull_request")

          # Check if CI succeeded
          CI_SUCCESS=$(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[] | select(.name == "PR CI/CD") | select(.conclusion == "success") | .id' | head -1)

          if [ -n "$CI_SUCCESS" ]; then
            echo "✅ CI passed, proceed with deployment"
          else
            echo "❌ CI failed or still running, abort deployment"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup local cache directories
        run: |
          # Create local cache directories
          mkdir -p /opt/action-runner/cache/jdk /opt/action-runner/cache/maven /opt/action-runner/cache/nodemodules /opt/action-runner/cache/kubectl
          echo "📁 Local cache directories created"
          ls -la /opt/action-runner/cache/

      - name: Restore JDK from local cache
        run: |
          echo "🔍 Checking local JDK cache..."
          ARCH=$(uname -m)
          JDK_CACHE_KEY="jdk-17-temurin-${ARCH}"
          JDK_CACHE_PATH="/opt/action-runner/cache/jdk/${JDK_CACHE_KEY}"

          echo "JDK_CACHE_KEY=$JDK_CACHE_KEY" >> $GITHUB_ENV
          echo "JDK_CACHE_PATH=$JDK_CACHE_PATH" >> $GITHUB_ENV

          if [ -d "$JDK_CACHE_PATH" ] && [ "$(ls -A $JDK_CACHE_PATH 2>/dev/null)" ]; then
            echo "✅ Found JDK cache: $JDK_CACHE_KEY"
            echo "🔧 Setting JDK environment variables..."
            echo "JAVA_HOME=$JDK_CACHE_PATH" >> $GITHUB_ENV
            echo "$JDK_CACHE_PATH/bin" >> $GITHUB_PATH
            echo "JDK_CACHE_HIT=true" >> $GITHUB_ENV
          else
            echo "❌ JDK cache miss, need to install"
            echo "JDK_CACHE_HIT=false" >> $GITHUB_ENV
          fi

      - name: Set up JDK 17 (if cache miss)
        if: env.JDK_CACHE_HIT == 'false'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Maven (if JDK cache miss)
        if: env.JDK_CACHE_HIT == 'false'
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Setup Maven from cache (if JDK cache hit)
        if: env.JDK_CACHE_HIT == 'true'
        run: |
          echo "🔧 JDK restored from cache, checking Maven..."
          if command -v mvn >/dev/null 2>&1; then
            echo "✅ Maven is available"
          else
            echo "⚠️ Maven not in PATH, trying cached Maven binary..."
            # Try from cached Maven binary
            MAVEN_BINARY_CACHE_PATH="/opt/action-runner/cache/maven-binary"
            if [ -d "$MAVEN_BINARY_CACHE_PATH" ]; then
              echo "✅ Found cached Maven binary"
              echo "M2_HOME=$MAVEN_BINARY_CACHE_PATH" >> $GITHUB_ENV
              echo "$MAVEN_BINARY_CACHE_PATH/bin" >> $GITHUB_PATH
            else
              echo "❌ No cached Maven binary, using setup-maven action"
              echo "NEED_MAVEN_INSTALL=true" >> $GITHUB_ENV
            fi
          fi

      - name: Install Maven (if needed)
        if: env.NEED_MAVEN_INSTALL == 'true'
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Save Maven binary to cache (if installed)
        if: env.NEED_MAVEN_INSTALL == 'true' && always()
        run: |
          echo "💾 Save Maven binary to local cache..."
          if [ -n "$M2_HOME" ] && [ -d "$M2_HOME" ]; then
            MAVEN_BINARY_CACHE_PATH="/opt/action-runner/cache/maven-binary"
            cp -r "$M2_HOME" "$MAVEN_BINARY_CACHE_PATH"
            echo "✅ Maven binary saved to local cache"
          else
            echo "⚠️ M2_HOME is not set, skip Maven binary caching"
          fi

      - name: Restore Maven dependencies from local cache
        run: |
          echo "🔍 Checking local cache for Maven dependencies..."
          MAVEN_DEPS_CACHE_KEY="maven-deps-$(find . -name 'pom.xml' -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)"
          MAVEN_DEPS_CACHE_FILE="/opt/action-runner/cache/maven/${MAVEN_DEPS_CACHE_KEY}.tar.gz"

          echo "MAVEN_DEPS_CACHE_KEY=$MAVEN_DEPS_CACHE_KEY" >> $GITHUB_ENV

          if [ -f "$MAVEN_DEPS_CACHE_FILE" ]; then
            echo "✅ Found Maven dependencies cache: $MAVEN_DEPS_CACHE_KEY"
            cd ~
            tar -xzf "$MAVEN_DEPS_CACHE_FILE"
            echo "📦 Maven dependencies restored from local cache"
            echo "MAVEN_DEPS_CACHE_HIT=true" >> $GITHUB_ENV
          else
            echo "❌ Maven dependencies cache miss, will save after build"
            echo "MAVEN_DEPS_CACHE_HIT=false" >> $GITHUB_ENV
          fi

      - name: Restore Node.js dependencies from local cache
        run: |
          echo "🔍 Checking local cache for Node.js dependencies..."
          NODEMODULES_CACHE_KEY="nodemodules-$(find miaocha-ui/frontend -name 'package.json' -o -name 'yarn.lock' -o -name 'package-lock.json' | xargs sha256sum | sha256sum | cut -d' ' -f1)"
          NODEMODULES_CACHE_FILE="/opt/action-runner/cache/nodemodules/${NODEMODULES_CACHE_KEY}.tar.gz"

          echo "NODEMODULES_CACHE_KEY=$NODEMODULES_CACHE_KEY" >> $GITHUB_ENV

          if [ -f "$NODEMODULES_CACHE_FILE" ]; then
            echo "✅ Found Node.js dependencies cache: $NODEMODULES_CACHE_KEY"
            cd miaocha-ui/frontend
            tar -xzf "$NODEMODULES_CACHE_FILE"
            echo "📦 Node.js dependencies restored from local cache"
            echo "NODEMODULES_CACHE_HIT=true" >> $GITHUB_ENV
          else
            echo "❌ Node.js dependencies cache miss, will save after build"
            echo "NODEMODULES_CACHE_HIT=false" >> $GITHUB_ENV
          fi

      - name: Verify Java and Maven
        run: |
          echo "🔍 Verify Java and Maven installation..."
          echo "Java version:"
          java -version
          echo
          echo "Maven version:"
          mvn -version

      - name: Extract Maven project version
        id: maven-version
        run: |

          VERSION=$(grep -m 1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/' | tr -d ' \t\n')

          if [ -z "$VERSION" ]; then
            echo "❌ Failed to get project version"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Project version: $VERSION"

      - name: Generate Docker tag
        id: docker-tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_TAG="PR${{ github.event.pull_request.number }}-${{ steps.maven-version.outputs.version }}-${TIMESTAMP}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=crpi-5x5i70hcgjeg1z8k.cn-shanghai.personal.cr.aliyuncs.com/miaocha-github-dev/miaocha-test-pr:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "latest_image=crpi-5x5i70hcgjeg1z8k.cn-shanghai.personal.cr.aliyuncs.com/miaocha-github-dev/miaocha-test-pr:latest-pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "📦 Image tag: ${IMAGE_TAG}"

      - name: Login to private Docker registry
        run: |
          echo "${{ secrets.DOCKER_PUSH_PASSWORD }}" | docker login --username="${{ secrets.DOCKER_PUSH_USERNAME }}" crpi-5x5i70hcgjeg1z8k.cn-shanghai.personal.cr.aliyuncs.com  --password-stdin

      - name: Build and push Docker image
        run: |
          echo "🐳 Building Docker image"
          echo "Image name: miaocha-test-pr"
          echo "Image tag: ${{ steps.docker-tag.outputs.image_tag }}"

          # 确保脚本可执行
          chmod +x scripts/build-start-docker.sh

          # 使用脚本构建镜像（只构建，不运行）
          ./scripts/build-start-docker.sh -b -n miaocha-test-pr -v ${{ steps.docker-tag.outputs.image_tag }}

          # 给镜像打上仓库标签
          docker tag miaocha-test-pr:${{ steps.docker-tag.outputs.image_tag }} ${{ steps.docker-tag.outputs.full_image }}
          docker tag miaocha-test-pr:${{ steps.docker-tag.outputs.image_tag }} ${{ steps.docker-tag.outputs.latest_image }}

          # Push image to registry
          echo "📤 Pushing image to private registry..."
          # Ensure Docker client does not use proxy for target registry
          docker push ${{ steps.docker-tag.outputs.full_image }}
          docker push ${{ steps.docker-tag.outputs.latest_image }}

          echo "✅ Image push completed!"

      - name: Restore kubectl from local cache
        run: |
          echo "🔍 Checking local kubectl cache..."
          KUBECTL_VERSION="v1.29.0"  # Use fixed version for caching
          KUBECTL_CACHE_KEY="kubectl-${KUBECTL_VERSION}-$(uname -m)"
          KUBECTL_CACHE_PATH="/opt/action-runner/cache/kubectl/${KUBECTL_CACHE_KEY}"

          echo "KUBECTL_CACHE_KEY=$KUBECTL_CACHE_KEY" >> $GITHUB_ENV
          echo "KUBECTL_CACHE_PATH=$KUBECTL_CACHE_PATH" >> $GITHUB_ENV

          if [ -f "$KUBECTL_CACHE_PATH/kubectl" ]; then
            echo "✅ Found kubectl cache: $KUBECTL_CACHE_KEY"
            sudo cp "$KUBECTL_CACHE_PATH/kubectl" /usr/local/bin/kubectl
            sudo chmod +x /usr/local/bin/kubectl
            echo "KUBECTL_CACHE_HIT=true" >> $GITHUB_ENV
          else
            echo "❌ kubectl cache miss, will download"
            echo "KUBECTL_CACHE_HIT=false" >> $GITHUB_ENV
          fi

      - name: Install kubectl (if cache miss)
        if: env.KUBECTL_CACHE_HIT == 'false'
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'  # Use fixed version

      - name: Save kubectl to local cache
        if: env.KUBECTL_CACHE_HIT == 'false' && always()
        run: |
          echo "💾 Save kubectl to local cache..."
          if command -v kubectl >/dev/null 2>&1; then
            mkdir -p "$KUBECTL_CACHE_PATH"
            cp "$(which kubectl)" "$KUBECTL_CACHE_PATH/kubectl"
            echo "✅ kubectl saved to local cache: $KUBECTL_CACHE_KEY"
          else
            echo "⚠️ kubectl not found, skip cache save"
          fi

      - name: Setup kubectl
        run: |
          echo "🔧 Configure kubectl..."
          # Create kubeconfig file
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

          # Verify connectivity
          kubectl cluster-info

      - name: Deploy to Kubernetes
        id: k8s-deploy
        run: |
          echo "🚀 Deploying to Kubernetes..."

          # Set environment variables
          export PR_NUMBER=${{ github.event.pull_request.number }}
          export DOCKER_IMAGE="${{ steps.docker-tag.outputs.latest_image }}"
          export DEEPSEEK_API_KEY="${{ secrets.DEEPSEEK_API_KEY }}"

          # Execute deployment
          chmod +x scripts/github/k8s/deploy.sh
          ./scripts/github/k8s/deploy.sh

      - name: Get deployment status
        id: k8s-status
        run: |
          echo "📊 Getting deployment status..."

          NAMESPACE="miaocha-pr-${{ github.event.pull_request.number }}"

          # Get node IP
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
          if [ -z "$NODE_IP" ]; then
            NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          fi

          # Get service ports
          MIAOCHA_PORT=$(kubectl get svc miaocha -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
          MYSQL_PORT=$(kubectl get svc mysql -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
          DORIS_HTTP_PORT=$(kubectl get svc doris -n $NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
          DORIS_STREAM_PORT=$(kubectl get svc doris -n $NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="stream-load")].nodePort}')
          DORIS_QUERY_PORT=$(kubectl get svc doris -n $NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="query")].nodePort}')

          echo "node_ip=$NODE_IP" >> $GITHUB_OUTPUT
          echo "miaocha_port=$MIAOCHA_PORT" >> $GITHUB_OUTPUT
          echo "mysql_port=$MYSQL_PORT" >> $GITHUB_OUTPUT
          echo "doris_http_port=$DORIS_HTTP_PORT" >> $GITHUB_OUTPUT
          echo "doris_stream_port=$DORIS_STREAM_PORT" >> $GITHUB_OUTPUT
          echo "doris_query_port=$DORIS_QUERY_PORT" >> $GITHUB_OUTPUT

          echo "✅ Deployment status captured"

      - name: Comment on PR with deployment failure
        if: failure() && steps.k8s-deploy.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            const docker_image = '${{ steps.docker-tag.outputs.latest_image }}';

            const comment = `## ❌ Deployment to internal test environment failed

            An error occurred when deploying **PR #${pr_number}** to the internal test environment.

            ### 🚨 Deployment Info

            - **Docker image**: \`${docker_image}\`
            - **Failure time**: ${new Date().toLocaleString('en-US', { timeZone: 'Asia/Shanghai' })}
            - **Namespace**: \`miaocha-pr-${pr_number}\`

            ### 🔍 Troubleshooting

            1. Check GitHub Actions logs for details
            2. Verify Kubernetes cluster health
            3. Ensure resource quotas are sufficient
            4. Verify the Docker image was pushed correctly

            ### 🛠️ Redeploy

            After fixing the issue, push again to trigger redeployment.

            ---
            *🤖 This comment was generated by CI/CD*`;

            // Create failure comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: comment
            });

            console.log('✅ Created deployment failure comment');

      - name: Comment on PR with deployment info
        if: success() && steps.k8s-status.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            const node_ip = '${{ steps.k8s-status.outputs.node_ip }}';
            const miaocha_port = '${{ steps.k8s-status.outputs.miaocha_port }}';
            const mysql_port = '${{ steps.k8s-status.outputs.mysql_port }}';
            const doris_http_port = '${{ steps.k8s-status.outputs.doris_http_port }}';
            const doris_stream_port = '${{ steps.k8s-status.outputs.doris_stream_port }}';
            const doris_query_port = '${{ steps.k8s-status.outputs.doris_query_port }}';
            const docker_image = '${{ steps.docker-tag.outputs.latest_image }}';

            const comment = `## 🚀 Internal test environment deployment succeeded

            **PR #${pr_number}** has been deployed to the internal test environment.

            ### 🌐 Access URLs

            | Service | URL | Note |
            |------|----------|------|
            | 🖥️ **Miaocha App** | http://${node_ip}:${miaocha_port} | Main entry |
            | 📊 **Doris HTTP** | http://${node_ip}:${doris_http_port} | Query UI |
            | 🔄 **Doris Stream Load** | http://${node_ip}:${doris_stream_port} | Data ingestion |
            | 🗄️ **Doris Query** | ${node_ip}:${doris_query_port} | Query port |
            | 🐬 **MySQL** | ${node_ip}:${mysql_port} | Database |


            ### 📦 Deployment Info

            - **Namespace**: \`miaocha-pr-${pr_number}\`
            - **Docker image**: \`${docker_image}\`
            - **Environment**: Internal test (dev)
            - **Deployment time**: ${new Date().toLocaleString('en-US', { timeZone: 'Asia/Shanghai' })}
            - **Data sync**: Synchronized latest test data


            ### ⚠️ Notes

            - This is an internal test environment for development and testing only
            - On first deploy, it automatically syncs data from the test environment (\`10.0.21.34\`)
            - Storage is ephemeral; data is lost after Pod restarts
            - All resources are auto-cleaned when the PR is closed
            - Do not store important data in this environment


            ### 🧹 Cleanup

            Resources are cleaned automatically when the PR is closed. You can also clean manually:
            \`\`\`bash
            kubectl delete namespace miaocha-pr-${pr_number}
            \`\`\`

            ---
            *🤖 This comment was generated by CI/CD*`;

            // 查找是否已有部署评论
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('Internal test environment deployment succeeded') &&
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              // 更新现有评论
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('✅ Updated existing deployment comment');
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: comment
              });
              console.log('✅ Created a new deployment comment');
            }

      - name: Save Maven dependencies to local cache
        if: env.MAVEN_DEPS_CACHE_HIT == 'false' && always()
        run: |
          echo "💾 Save Maven dependencies to local cache..."
          if [ -d ~/.m2 ] && [ "$(ls -A ~/.m2 2>/dev/null)" ]; then
            cd ~
            tar -czf "/opt/action-runner/cache/maven/$MAVEN_DEPS_CACHE_KEY.tar.gz" .m2
            echo "✅ Maven dependencies cached locally: $MAVEN_DEPS_CACHE_KEY"
          else
            echo "⚠️ ~/.m2 is empty, skip caching"
          fi

      - name: Save JDK to local cache
        if: env.JDK_CACHE_HIT == 'false' && always()
        run: |
          echo "💾 Save JDK to local cache..."
          if [ -n "$JAVA_HOME" ] && [ -d "$JAVA_HOME" ]; then
            mkdir -p "$(dirname $JDK_CACHE_PATH)"
            cp -r "$JAVA_HOME" "$JDK_CACHE_PATH"
            echo "✅ JDK cached locally: $JDK_CACHE_KEY"
          else
            echo "⚠️ JAVA_HOME not set or missing, skip JDK caching"
          fi

      - name: Save Node.js dependencies to local cache
        if: env.NODEMODULES_CACHE_HIT == 'false' && always()
        run: |
          echo "💾 Save Node.js dependencies to local cache..."
          if [ -d "miaocha-ui/frontend/node_modules" ] && [ "$(ls -A miaocha-ui/frontend/node_modules 2>/dev/null)" ]; then
            cd miaocha-ui/frontend
            tar -czf "/opt/action-runner/cache/nodemodules/$NODEMODULES_CACHE_KEY.tar.gz" node_modules
            echo "✅ Node.js dependencies cached locally: $NODEMODULES_CACHE_KEY"
          else
            echo "⚠️ node_modules is empty or missing, skip caching"
          fi

      - name: Summary
        run: |
          echo "## 🚀 PR CD Deployment Succeeded" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Image Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: crpi-5x5i70hcgjeg1z8k.cn-shanghai.personal.cr.aliyuncs.com/miaocha-github-dev/miaocha-test-pr" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: " >> $GITHUB_STEP_SUMMARY
          echo "  - ${{ steps.docker-tag.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "  - latest-pr${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 K8s Deployment Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: miaocha-pr-${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node IP**: ${{ steps.k8s-status.outputs.node_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Miaocha app**: http://${{ steps.k8s-status.outputs.node_ip }}:${{ steps.k8s-status.outputs.miaocha_port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Doris HTTP**: http://${{ steps.k8s-status.outputs.node_ip }}:${{ steps.k8s-status.outputs.doris_http_port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Doris Stream Load**: http://${{ steps.k8s-status.outputs.node_ip }}:${{ steps.k8s-status.outputs.doris_stream_port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Doris Query**: ${{ steps.k8s-status.outputs.node_ip }}:${{ steps.k8s-status.outputs.doris_query_port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **MySQL**: ${{ steps.k8s-status.outputs.node_ip }}:${{ steps.k8s-status.outputs.mysql_port }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Docker Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.docker-tag.outputs.latest_image }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧹 Cleanup Command" >> $GITHUB_STEP_SUMMARY
          echo "Resources will be cleaned automatically when PR closes; you can also clean manually:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "kubectl delete namespace miaocha-pr-${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
